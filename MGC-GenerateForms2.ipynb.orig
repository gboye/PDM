{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##Importations\n",
    "- codecs pour les encodages\n",
    "- pandas et numpy pour les calculs sur tableaux\n",
    "- matplotlib pour les graphiques\n",
    "- itertools pour les itérateurs sophistiqués (paires sur liste, ...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# -*- coding: utf8 -*-\n",
    "import codecs\n",
    "import features\n",
    "import re\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import itertools as it\n",
    "import pickle\n",
    "import networkx as nx\n",
    "#%pylab inline\n",
    "#pd.options.display.mpl_style = 'default'\n",
    "debug=False\n",
    "from __future__ import print_function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import yaml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "def dateheure():\n",
    "    return datetime.datetime.utcnow().strftime('%y%m%d%H%M')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "saut=\"\\n\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Préparation des matrices de traits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "features.add_config('bdlexique.ini')\n",
    "fs=features.FeatureSystem('phonemes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sampleNumber=\"03-X\"\n",
    "genDigraphe=False\n",
    "genGraphe=False\n",
    "samplePrefix=\"MGC-150815-extend-%s-paradigmes\"%sampleNumber\n",
    "sampleFile=samplePrefix+\".csv\"\n",
    "goldFile=\"MGC-150815-total-1508150555-paradigmes.csv\"\n",
    "analysisPrefix=\"MGC-150815-extend-%s\"%sampleNumber\n",
    "logfile_name=analysisPrefix+samplePrefix+\".log\"\n",
    "logfile = codecs.open(\"2015-Data/\"+logfile_name,mode='w',encoding=\"utf8\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Préparation des cases du paradigme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "casesPrincipales= [\n",
    "        'inf', 'pi1S', 'pi2S', 'pi3S', 'pi1P', 'pi2P', 'pi3P', 'ii1S',\n",
    "        'ii2S', 'ii3S', 'ii1P', 'ii2P', 'ii3P', \n",
    "        'fi1S', 'fi2S', 'fi3S', 'fi1P', 'fi2P',\n",
    "        'fi3P', 'pI2S', 'pI1P', 'pI2P', 'ps1S', 'ps2S', 'ps3S', 'ps1P',\n",
    "        'ps2P', 'ps3P', \n",
    "        'pc1S', 'pc2S', 'pc3S', 'pc1P', 'pc2P', 'pc3P', 'pP',\n",
    "        'ppMS', 'ppMP', 'ppFS', 'ppFP'\n",
    "            ]\n",
    "casesSecondaires= [\n",
    "       'ai1S', 'ai2S', 'ai3S', 'ai1P', 'ai2P', 'ai3P', 'is1S', 'is2S', 'is3S', 'is1P', 'is2P', 'is3P'\n",
    "            ]\n",
    "casesTotales=casesPrincipales+casesSecondaires"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Préparation du calcul des analogies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Calcul de la différence entre deux formes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def diff(mot1,mot2):\n",
    "    result=[]\n",
    "    diff1=\"\"\n",
    "    diff2=\"\"\n",
    "    same=\"\"\n",
    "    vide=\".\"\n",
    "    lmax=max(len(mot1),len(mot2))\n",
    "    lmin=min(len(mot1),len(mot2))\n",
    "    for index in range(lmax):\n",
    "        if index < lmin:\n",
    "            if mot1[index]!=mot2[index]:\n",
    "                diff1+=mot1[index]\n",
    "                diff2+=mot2[index]\n",
    "                same+=vide\n",
    "            else:\n",
    "                same+=mot1[index]\n",
    "                diff1+=vide\n",
    "                diff2+=vide\n",
    "        elif index < len(mot1):\n",
    "            diff1+=mot1[index]\n",
    "        elif index < len(mot2):\n",
    "            diff2+=mot2[index]\n",
    "    diff1=diff1.lstrip(\".\")\n",
    "    diff2=diff2.lstrip(\".\")\n",
    "#    return (same,diff1,diff2,diff1+\"_\"+diff2)\n",
    "    return (diff1+\"-\"+diff2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Accumulation des paires appartenant à un patron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def rowDiff(row, patrons):\n",
    "    result=diff(row[0],row[1])\n",
    "    if not result in patrons:\n",
    "        patrons[result]=(formesPatron(),formesPatron())\n",
    "    patrons[result][0].ajouterFormes(row[0])\n",
    "    patrons[result][1].ajouterFormes(row[1])\n",
    "    return (result[0],result[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Transformation d'un patron en RegExp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def patron2regexp(morceaux):\n",
    "    result=\"^\"\n",
    "    for morceau in morceaux:\n",
    "        if morceau==\"*\":\n",
    "            result+=\"(.*)\"\n",
    "        elif len(morceau)>1:\n",
    "            result+=\"([\"+morceau+\"])\"\n",
    "        else:\n",
    "            result+=morceau\n",
    "    result+=\"$\"\n",
    "    result=result.replace(\")(\",\"\")\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Substitution de sortie \n",
    "???"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def remplacementSortie(sortie):\n",
    "    n=1\n",
    "    nsortie=\"\"\n",
    "    for lettre in sortie:\n",
    "        if lettre==\".\":\n",
    "            nsortie+=\"\\g<%d>\"%n\n",
    "            n+=1\n",
    "        else:\n",
    "            nsortie+=lettre\n",
    "    return nsortie"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Classe pour la gestion des patrons, des classes et des transformations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class paireClasses:\n",
    "    def __init__(self,case1,case2):\n",
    "        self.case1=case1\n",
    "        self.case2=case2\n",
    "        self.nom=case1+\"-\"+case2\n",
    "        self.classes1=classesPaire(case1,case2)\n",
    "        self.classes2=classesPaire(case2,case1)\n",
    "\n",
    "    def ajouterPatron(self,n,patron,motif):\n",
    "        if n==1:\n",
    "            self.classes1.ajouterPatron(patron,motif)\n",
    "        elif n==2:\n",
    "            self.classes2.ajouterPatron(patron,motif)\n",
    "        else:\n",
    "            print (\"le numéro de forme n'est pas dans [1,2]\",n,file=logfile)\n",
    "\n",
    "    def ajouterPaire(self,forme1,forme2):\n",
    "        self.classes1.ajouterPaire(forme1,forme2)\n",
    "        self.classes2.ajouterPaire(forme2,forme1)\n",
    "        \n",
    "    def calculerClasses(self):\n",
    "        return(self.classes1,self.classes2)\n",
    "\n",
    "    \n",
    "class classesPaire:\n",
    "    '''\n",
    "    Gestion des patrons, des classes et des transformations\n",
    "    \n",
    "    ajouterPatron : ajoute un patron et son motif associé (MGL)\n",
    "    ajouterPaire : ajoute une paire de formes, calcule la classe de la forme1 et la règle sélectionnée\n",
    "    sortirForme : cacule les formes de sortie correspondant à la forme1 avec leurs coefficients respectifs\n",
    "    '''\n",
    "    def __init__(self,case1,case2):\n",
    "        self.case1=case1\n",
    "        self.case2=case2\n",
    "        self.nom=case1+\"-\"+case2\n",
    "        self.classe={}\n",
    "        self.nbClasse={}\n",
    "        self.patrons={}\n",
    "        self.entree={}\n",
    "        self.sortie={}\n",
    "    \n",
    "    def ajouterPatron(self,patron,motif):\n",
    "        self.patrons[patron]=motif\n",
    "        (entree,sortie)=patron.split(\"-\")\n",
    "        self.entree[patron]=entree.replace(u\".\",u\"(.)\")\n",
    "        self.sortie[patron]=remplacementSortie(sortie)\n",
    "    \n",
    "    def ajouterPaire(self,forme1,forme2):\n",
    "        '''\n",
    "        on calcule la classe de la paire idClasseForme et la règle sélectionnée\n",
    "        on incrémente le compteur de la classe et celui de la règle sélectionnée à l'intérieur de la classe\n",
    "        '''\n",
    "        classeForme=[]\n",
    "        regleForme=\"\"\n",
    "        for patron in self.patrons:\n",
    "            if re.match(self.patrons[patron],forme1):\n",
    "                classeForme.append(patron)\n",
    "                '''\n",
    "                le +\"$\" permet de forcer l'alignement à droite pour les transformations suffixales\n",
    "                '''\n",
    "                if forme2==re.sub(self.entree[patron]+\"$\",self.sortie[patron],forme1):\n",
    "                    regleForme=patron\n",
    "        idClasseForme=\", \".join(classeForme)\n",
    "        if not idClasseForme in self.classe:\n",
    "            self.classe[idClasseForme]={}\n",
    "            self.nbClasse[idClasseForme]=0\n",
    "        if not regleForme in self.classe[idClasseForme]:\n",
    "            self.classe[idClasseForme][regleForme]=0\n",
    "        self.nbClasse[idClasseForme]+=1\n",
    "        self.classe[idClasseForme][regleForme]+=1\n",
    "\n",
    "    def sortirForme(self,forme):\n",
    "        classeForme=[]\n",
    "        sortieForme={}\n",
    "        for patron in self.patrons:\n",
    "            if re.match(self.patrons[patron],forme):\n",
    "                classeForme.append(patron)\n",
    "        if classeForme:\n",
    "            idClasseForme=\", \".join(classeForme)\n",
    "            if idClasseForme in self.nbClasse:\n",
    "                nTotal=self.nbClasse[idClasseForme]\n",
    "                for patron in self.classe[idClasseForme]:\n",
    "                    sortie=re.sub(self.entree[patron]+\"$\",self.sortie[patron],forme)\n",
    "                    sortieForme[sortie]=float(self.classe[idClasseForme][patron])/nTotal\n",
    "            else:\n",
    "                if debug:\n",
    "                    print (forme, file=logfile)\n",
    "                    print (\"pas de classe\",idClasseForme, file=logfile)\n",
    "                    print (\"%.2f par forme de sortie\" % (float(1)/len(classeForme)), file=logfile)\n",
    "                nTotal=len(classeForme)\n",
    "                for patron in classeForme:\n",
    "                    sortie=re.sub(self.entree[patron]+\"$\",self.sortie[patron],forme)\n",
    "                    sortieForme[sortie]=float(1)/nTotal\n",
    "        else:\n",
    "            print (forme, file=logfile) \n",
    "            print (\"pas de patron\", file=logfile)\n",
    "        return sortieForme\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##Appliquer la formule de calcul des différences entre chaines à chaque ligne\n",
    "\n",
    ">si il y a au moins une ligne\n",
    "\n",
    ">>on applique la différence à la ligne\n",
    "\n",
    ">>on calcule les deux patrons par suppression des points initiaux\n",
    "\n",
    ">>on renvoie le groupement par patrons (1&2)\n",
    "\n",
    ">sinon\n",
    "\n",
    ">>on renvoie le paradigme vide d'origine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def OLDrapports(paradigme):\n",
    "    (case1,case2,lexeme)= paradigme.columns.values.tolist()\n",
    "    patrons=pairePatrons(case1,case2)\n",
    "    if len(paradigme)>0:\n",
    "#        for index, row in paradigme.iterrows():\n",
    "#            patrons.ajouterFormes(row[0],row[1],diff(row[0],row[1]))\n",
    "        paradigme.apply(lambda x: patrons.ajouterFormes(x[case1],x[case2],diff(x[case1],x[case2])), axis=1)\n",
    "        (regles1,regles2)=patrons.calculerGM()\n",
    "    return patrons.calculerGM()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def rapports(paradigme):\n",
    "    if len(paradigme.columns.values.tolist())==2:\n",
    "        (case1,lexeme)= paradigme.columns.values.tolist()\n",
    "        case2=case1\n",
    "    else:\n",
    "        (case1,case2,lexeme)= paradigme.columns.values.tolist()\n",
    "    patrons=pairePatrons(case1,case2)\n",
    "    classes=paireClasses(case1,case2)\n",
    "    if len(paradigme)>0:\n",
    "        paradigme.apply(lambda x: patrons.ajouterFormes(x[case1],x[case2],diff(x[case1],x[case2])), axis=1)\n",
    "        (regles1,regles2)=patrons.calculerGM()\n",
    "        for regle in regles1:\n",
    "            classes.ajouterPatron(1,regle,regles1[regle])\n",
    "        for regle in regles2:\n",
    "            classes.ajouterPatron(2,regle,regles2[regle])\n",
    "        paradigme.apply(lambda x: classes.ajouterPaire(x[case1],x[case2]), axis=1)\n",
    "    (classes1,classes2)=classes.calculerClasses()\n",
    "    return (classes1,classes2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Dédoubler les lignes avec des surabondances dans *colonne*\n",
    ">identifier une ligne avec surabondance\n",
    "\n",
    ">>ajouter les lignes correspondant à chaque valeur\n",
    "\n",
    ">>ajouter le numéro de la ligne initiale dans les lignes à supprimer\n",
    "\n",
    ">supprimer les lignes avec surabondance\n",
    "\n",
    "NB : il faut préparer le tableau pour avoir une indexation qui permette l'ajout des valeurs individuelles et la suppression des lignes de surabondances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def splitCellMates(df,colonne):\n",
    "    '''\n",
    "    Calcul d'une dataframe sans surabondance par dédoublement des valeurs\n",
    "    '''\n",
    "    test=df.reset_index()\n",
    "    del test[\"index\"]\n",
    "    splitIndexes=[]\n",
    "    for index,ligne in test.iterrows():\n",
    "        if \",\" in ligne[colonne]:\n",
    "            valeurs=set(ligne[colonne].split(\",\"))\n",
    "            nouvelleLigne=ligne\n",
    "            for valeur in valeurs:\n",
    "                nouvelleLigne[colonne]=valeur\n",
    "                test=test.append(nouvelleLigne,ignore_index=True)\n",
    "            splitIndexes.append(index)\n",
    "    if splitIndexes:\n",
    "        test=test.drop(test.index[splitIndexes])\n",
    "    return test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "paradigmes=pd.read_csv(\"2015-Data/\"+sampleFile,sep=\";\",encoding=\"utf8\")\n",
    "del paradigmes[u\"Unnamed: 0\"]\n",
    "#paradigmes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "phonologicalMap=analysisPrefix[-2:]\n",
    "if debug: print(phonologicalMap)\n",
    "neutralisationsNORD=(u\"6û\",u\"9ê\")\n",
    "neutralisationsSUD=(u\"e2o\",u\"E9O\")\n",
    "if phonologicalMap==\"-N\":\n",
    "    neutralisations=neutralisationsNORD\n",
    "elif phonologicalMap==\"-S\":\n",
    "    neutralisations=neutralisationsSUD\n",
    "else:\n",
    "    neutralisations=(u\"\",u\"\")\n",
    "    phonologicalMap=(\"-X\")\n",
    "bdlexiqueIn = unicode(u\"èò\"+neutralisations[0])\n",
    "bdlexiqueNum = [ord(char) for char in bdlexiqueIn]\n",
    "neutreOut = unicode(u\"EO\"+neutralisations[1])\n",
    "neutralise = dict(zip(bdlexiqueNum, neutreOut))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def recoder(chaine,table=neutralise):\n",
    "    if type(chaine)==str:\n",
    "        temp=unicode(chaine.decode('utf8')).translate(table)\n",
    "        result=temp.encode('utf8')\n",
    "    elif type(chaine)==unicode:\n",
    "        result=chaine.translate(table)\n",
    "    else:\n",
    "        result=chaine\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "GOLD=pd.read_csv(\"2015-Data/\"+goldFile,sep=\";\",encoding=\"utf8\")\n",
    "del GOLD[u\"Unnamed: 0\"]\n",
    "goldCases=GOLD.columns.tolist()\n",
    "goldCases.remove(u\"lexeme\")\n",
    "for case in goldCases:\n",
    "    GOLD[case]=GOLD[case].apply(lambda x: recoder(x))\n",
    "    \n",
    "paradigmesGOLD=GOLD[paradigmes.columns.values.tolist()]\n",
    "#paradigmesGOLD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- sampleCases pour la liste des cases effectivement représentées dans le corpus de départ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sampleCases=paradigmes.columns.values.tolist()\n",
    "sampleCases.remove(u\"lexeme\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49485"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paradigmes.stack().value_counts(dropna=True).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open(\"2015-Data/\"+analysisPrefix+'-Regles.pkl', 'rb') as input:\n",
    "    resultatsLecture = pickle.load(input)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Comparer les cases analysées avec l'ensemble de toutes les cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "analyseCases=list(set([case for (case,autre) in resultatsLecture.keys()]))\n",
    "if sorted(analyseCases)!=sorted(casesTotales):\n",
    "    print (\"Attention l'analyse ne comprend pas toutes les cases\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class paradigmeDistribution:\n",
    "    '''\n",
    "    Gestion des distributions dans les cases du paradigme\n",
    "    '''\n",
    "\n",
    "    def __init__(self,lexeme):\n",
    "        self.lexeme=lexeme\n",
    "        self.formes={i:{} for i in analyseCases}\n",
    "\n",
    "    def ajouterFormes(self,case,formes,coef=1.0):\n",
    "        for forme in formes:\n",
    "            if not forme in self.formes[case]:\n",
    "                self.formes[case][forme]=0\n",
    "            self.formes[case][forme]+=formes[forme]*coef\n",
    "            \n",
    "    def normaliserDistributions(self,caseListe=analyseCases):\n",
    "        normalesDistributions={i:{} for i in caseListe}\n",
    "        for case in caseListe:\n",
    "            total=0\n",
    "            for element in self.formes[case]:\n",
    "                total+=self.formes[case][element]\n",
    "            for element in self.formes[case]:\n",
    "                normalesDistributions[case][element]=float(self.formes[case][element])/total\n",
    "        return normalesDistributions\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def generateForms(lexeme):\n",
    "    candidats=paradigmeDistribution(lexeme)\n",
    "    casesSamples=paradigmes[paradigmes[\"lexeme\"]==lexeme].columns[paradigmes[paradigmes[\"lexeme\"]==lexeme].notnull().iloc[0]].tolist()\n",
    "    casesSamples.remove(\"lexeme\")\n",
    "    for caseDepart in casesSamples:\n",
    "        formeDepart=paradigmes[paradigmes[\"lexeme\"]==lexeme][caseDepart].iloc[0]\n",
    "        if debug: print (caseDepart,formeDepart, file=logfile)\n",
    "#        if formeDepart!=\"nan\":\n",
    "        for case in analyseCases:\n",
    "            if debug: print (case, file=logfile)\n",
    "            if not isinstance(resultatsLecture[(caseDepart, case)],str):\n",
    "                if \",\" in formeDepart:\n",
    "                    formesDepart=formeDepart.split(\",\")\n",
    "                    coef=1.0/len(formesDepart)\n",
    "                    for element in formesDepart:\n",
    "                        candidats.ajouterFormes(case,resultatsLecture[(caseDepart, case)].sortirForme(element),coef)\n",
    "                else:\n",
    "                    candidats.ajouterFormes(case,resultatsLecture[(caseDepart, case)].sortirForme(formeDepart))\n",
    "            else: \n",
    "                if debug: print (\"str\", resultatsLecture[(caseDepart, case)], file=logfile)\n",
    "    return candidats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def ajouterPoint(lexeme,forme,case,digraphe,graphe):\n",
    "    pointName=\"%s-%s-%s\"%(lexeme,forme,case)\n",
    "#    if not pointName in digraphe.nodes():\n",
    "    tam=case[:2]\n",
    "    if tam==\"in\": tam=\"inf\"\n",
    "    digraphe.add_node(pointName, tam='\"%s\"'%tam)\n",
    "    graphe.add_node(pointName, tam='\"%s\"'%tam)\n",
    "    return pointName\n",
    "\n",
    "def ajouterFleche(pointDepart,pointSortie,coef,digraphe,graphe):\n",
    "    digraphe.add_edge(pointDepart,pointSortie,weight=float(coef))\n",
    "    if digraphe.has_edge(pointSortie,pointDepart):\n",
    "        coefGraphe=float(digraphe.edge[pointSortie][pointDepart][\"weight\"]+coef)/2\n",
    "        graphe.add_edge(pointDepart,pointSortie,weight=coefGraphe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def generateParadigms(generation1,genDigraphe=True):\n",
    "    lexeme=generation1.lexeme\n",
    "    distributionInitiale=generation1.normaliserDistributions()\n",
    "    candidats=paradigmeDistribution(lexeme)\n",
    "    digraphe=nx.DiGraph()\n",
    "    graphe=nx.Graph()    \n",
    "    for caseDepart in analyseCases:\n",
    "        for formeDepart in distributionInitiale[caseDepart]:\n",
    "            if formeDepart:\n",
    "                pointDepart=ajouterPoint(lexeme,formeDepart,caseDepart,digraphe,graphe)\n",
    "                coefDepart=distributionInitiale[caseDepart][formeDepart]\n",
    "                if debug: print (caseDepart,formeDepart, file=logfile)\n",
    "                for caseSortie in analyseCases:\n",
    "                    distributionSortieBrute=resultatsLecture[(caseDepart, caseSortie)].sortirForme(formeDepart)\n",
    "                    if distributionSortieBrute:\n",
    "                        if not genDigraphe:\n",
    "#                            print (\"brute\",distributionSortieBrute)\n",
    "                            distributionSortie={f:distributionSortieBrute[f] for f in distributionSortieBrute if f in distributionInitiale[caseSortie]}\n",
    "                        else:\n",
    "                            distributionSortie=distributionSortieBrute\n",
    "#                        print (\"filtre\",distributionSortie)\n",
    "#                        print (distributionInitiale[caseSortie])\n",
    "                        if debug: print (caseSortie,distributionSortie,distributionInitiale[caseDepart], file=logfile)\n",
    "                        candidats.ajouterFormes(caseSortie,distributionSortie,distributionInitiale[caseDepart][formeDepart])\n",
    "                        for formeSortie in distributionSortie:\n",
    "                            pointSortie=ajouterPoint(lexeme,formeSortie,caseSortie,digraphe,graphe)\n",
    "                            coefSortie=distributionSortie[formeSortie]\n",
    "                            ajouterFleche(pointDepart,pointSortie,float(coefDepart*coefSortie),digraphe,graphe)\n",
    "    return (candidats,digraphe,graphe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def generate(lexeme,genDigraphe=True):\n",
    "#    print (lexeme,end=\", \")\n",
    "    generation1=generateForms(lexeme)\n",
    "#    print (\"génération 2\",end=\", \")\n",
    "    (generation2,lexDigraphe,lexGraphe)=generateParadigms(generation1,genDigraphe)\n",
    "    lexCliques=list(nx.algorithms.clique.find_cliques(lexGraphe))\n",
    "#    print (lexCliques)\n",
    "#    print (\"génération 3\")\n",
    "    return (generation2,lexDigraphe,lexGraphe,lexCliques)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4547"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(paradigmes.dropna(thresh=2)[\"lexeme\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44938"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paradigmes.dropna(thresh=2).count().sum()-paradigmes.dropna(thresh=2)[\"lexeme\"].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####Calculer le score de la clique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def cliqueScore(clique,graph):\n",
    "    score=0\n",
    "    for (depart,arrivee) in it.combinations_with_replacement(clique,2):\n",
    "        score+=graph[depart][arrivee][\"weight\"]\n",
    "    return score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##Génération des formes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4547\n",
      "0 1509140307 0, 25 1509140309 0, 50 1509140310 1, 75 1509140312 1, 100 1509140314 2, 125 1509140315 2, 150 1509140317 3, 175 1509140318 3, 200 1509140320 4, 225 1509140321 4, 250 1509140323 5, 275 1509140325 6, 300 1509140326 6, 325 1509140328 7, 350 1509140330 7, 375 1509140331 8, 400 1509140333 8, 425 1509140334 9, 450 1509140335 9, 475 1509140337 10, 500 1509140338 10, 525 1509140339 11, 550 1509140341 12, 575 1509140342 12, 600 1509140343 13, 625 1509140344 13, 650 1509140346 14, 675 1509140347 14, 700"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "debug=False\n",
    "#listeTest=[u\"manger\",u\"boire\",u\"dormir\",u\"aller\",u\"neiger\"]\n",
    "listeTest=paradigmes.dropna(thresh=2)[\"lexeme\"].values.tolist()\n",
    "#listeTest=[u\"abasourdir\",u\"évacuer\"]\n",
    "nbVerbes=len(listeTest)\n",
    "print (nbVerbes)\n",
    "globDigraphe=nx.DiGraph()\n",
    "globGraphe=nx.Graph()\n",
    "cliques=[]\n",
    "cliquesScores={}\n",
    "cliquesListes={}\n",
    "numClique=0\n",
    "for i,element in enumerate(listeTest):\n",
    "    if (i%25)==0: print (i, dateheure(), int(100*float(i)/nbVerbes), end=\", \")\n",
    "    result=generate(element,genDigraphe)\n",
    "    (generation,lexDigraphe,lexGraphe,lexCliques)= result\n",
    "#    print (generation,lexDigraphe,lexGraphe,lexCliques)\n",
    "    if genDigraphe:\n",
    "        globDigraphe=nx.union(globDigraphe,lexDigraphe)\n",
    "    if genGraphe:\n",
    "        globGraphe=nx.union(globGraphe,lexGraphe)\n",
    "    cliques.extend(lexCliques)\n",
    "    for clique in lexCliques:\n",
    "        cliquesScores[numClique]=cliqueScore(clique,lexGraphe)\n",
    "        cliquesListes[numClique]=clique\n",
    "        numClique+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "versionStamp=dateheure()\n",
    "if genDigraphe: \n",
    "    nx.write_dot(globDigraphe,u\"2015-Data/digraphe-%s.dot\"%versionStamp)\n",
    "if genGraphe:\n",
    "    nx.write_dot(globGraphe,u\"2015-Data/graphe-%s.dot\"%versionStamp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print (len(cliques))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "longueurCliques={}\n",
    "for clique in cliques:\n",
    "    longueur=len(clique)\n",
    "    if not longueur in longueurCliques:\n",
    "        longueurCliques[longueur]=1\n",
    "    else:\n",
    "        longueurCliques[longueur]+=1\n",
    "longueurCliques"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Faire la liste des cases lexicalisées de l'échantillon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "nbFormesLexicales={}\n",
    "casesLexicales={element:paradigmes[paradigmes[\"lexeme\"]==element].columns[paradigmes[paradigmes[\"lexeme\"]==element].notnull().iloc[0]].tolist() for element in listeTest}\n",
    "for element in casesLexicales:\n",
    "    casesLexicales[element].remove(\"lexeme\")\n",
    "    nbFormesLexicales[element]=len(casesLexicales[element])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##Comparer la sortie des cliques avec le paradigme de départ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "seuilClique=1\n",
    "#paradigmesCLIQUES=pd.DataFrame(columns=paradigmes.columns.values.tolist())\n",
    "paradigmesListe=[]\n",
    "for n,clique in enumerate(sorted(cliques,key=lambda x: len(x),reverse=True)):\n",
    "#    if seuilClique==0:\n",
    "#        seuilClique=len(clique)-15\n",
    "    if len(clique)>seuilClique:\n",
    "        paradigmeClique={}\n",
    "        sampleOK=True\n",
    "#        print (n, len(clique))\n",
    "        point=clique[0].split(\"-\")\n",
    "        lPoint=len(point)\n",
    "#        print (point,\"-\".join(point[0:len(point)-2]))\n",
    "        if lPoint==3:\n",
    "            lexeme=point[0]\n",
    "        else:\n",
    "            lexeme=\"-\".join(point[0:len(point)-2])\n",
    "        paradigmeClique[\"lexeme\"]=lexeme\n",
    "        if n%250==0: print (n,end=\", \")\n",
    "#        casesLexeme=paradigmes[paradigmes[\"lexeme\"]==lexeme].notnull().columns.tolist()\n",
    "#        casesLexeme=paradigmes[paradigmes[\"lexeme\"]==lexeme].columns[paradigmes[paradigmes[\"lexeme\"]==lexeme].notnull().iloc[0]].tolist()\n",
    "#        casesLexeme.remove(\"lexeme\")\n",
    "        casesLexeme=casesLexicales[lexeme]\n",
    "        nbInitial=len(casesLexeme)\n",
    "        if casesLexeme and len(casesLexeme)<=len(clique):\n",
    "            for element in casesLexeme:\n",
    "#                print (lexeme,element, paradigmes[paradigmes[\"lexeme\"]==lexeme][element])\n",
    "                champForme=paradigmes[paradigmes[\"lexeme\"]==lexeme][element].iloc[0]\n",
    "                if \",\"  in champForme:\n",
    "                    formes=champForme.split(\",\")\n",
    "                    nbInitial+=len(formes)-1\n",
    "                    okFormes=False\n",
    "                    for forme in formes:\n",
    "                        pointCase=u\"%s-%s-%s\"% (lexeme,forme,element)\n",
    "#                        if debug: print (pointCase, clique)\n",
    "                        if pointCase in clique:\n",
    "                            okFormes=True\n",
    "                            print (\"point\",pointCase)\n",
    "#                            print (\"clique\",clique)\n",
    "                            print (\"gold\",GOLD[GOLD[\"lexeme\"]==lexeme][element])\n",
    "                    if okFormes:\n",
    "                        sampleOK=True\n",
    "                    else:\n",
    "                        sampleOK=False\n",
    "                        break\n",
    "                else:\n",
    "                    forme=champForme\n",
    "                    pointCase=u\"%s-%s-%s\"% (lexeme,forme,element)\n",
    "                    if debug: print (pointCase, clique)\n",
    "                    if not pointCase in clique:\n",
    "                        sampleOK=False\n",
    "#                        print (\"point\",pointCase)\n",
    "#                        print (\"clique\",clique)\n",
    "#                        print (\"gold\",GOLD[GOLD[\"lexeme\"]==lexeme][element])\n",
    "                        break\n",
    "        else:\n",
    "            sampleOK=False\n",
    "        if sampleOK:\n",
    "            for element in clique:\n",
    "                elements=element.split(\"-\")\n",
    "                forme=elements[-2]\n",
    "                taminfo=elements[-1]\n",
    "#                try:\n",
    "#                 (lexeme,forme,taminfo)=element.split(\"-\")\n",
    "#                except ValueError:\n",
    "#                    print (element)\n",
    "                paradigmeClique[taminfo]=forme\n",
    "#                if taminfo in paradigmes.columns:\n",
    "#                    if not paradigmes[(paradigmes[\"lexeme\"]==lexeme)][taminfo].isnull().item():\n",
    "#                        if paradigmes[(paradigmes[\"lexeme\"]==lexeme)][taminfo].item()!=forme:\n",
    "#                            sampleOK=False\n",
    "#                            print (paradigmes[(paradigmes[\"lexeme\"]==lexeme)][taminfo].item(),forme,taminfo,end=\", \")\n",
    "            paradigmeClique[\"score\"]=cliquesScores[n]\n",
    "            paradigmeClique[\"ajouts\"]=len(clique)-nbInitial\n",
    "#            print (cliqueScore(clique),clique)\n",
    "            paradigmesListe.append(paradigmeClique)\n",
    "        else:\n",
    "            if debug:\n",
    "                print ()\n",
    "                print (lexeme,clique)\n",
    "                print ()\n",
    "    else:\n",
    "        break\n",
    "\n",
    "paradigmesCLIQUES=pd.DataFrame(paradigmesListe,columns=GOLD.columns.values.tolist()+[u\"score\",u\"ajouts\"])\n",
    "print (seuilClique)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "paradigmeSILVER=paradigmesCLIQUES[paradigmesCLIQUES[\"score\"]==paradigmesCLIQUES.groupby([\"lexeme\"])[\"score\"].transform(max)]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
=======
   "execution_count": 124,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lexeme</th>\n",
       "      <th>ai1P</th>\n",
       "      <th>ai1S</th>\n",
       "      <th>ai2P</th>\n",
       "      <th>ai2S</th>\n",
       "      <th>ai3P</th>\n",
       "      <th>ai3S</th>\n",
       "      <th>fi1P</th>\n",
       "      <th>fi1S</th>\n",
       "      <th>fi2P</th>\n",
       "      <th>...</th>\n",
       "      <th>ppMP</th>\n",
       "      <th>ppMS</th>\n",
       "      <th>ps1P</th>\n",
       "      <th>ps1S</th>\n",
       "      <th>ps2P</th>\n",
       "      <th>ps2S</th>\n",
       "      <th>ps3P</th>\n",
       "      <th>ps3S</th>\n",
       "      <th>score</th>\n",
       "      <th>ajouts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>faire</td>\n",
       "      <td>fim</td>\n",
       "      <td>fi</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fi</td>\n",
       "      <td>fir</td>\n",
       "      <td>fi</td>\n",
       "      <td>f6rô</td>\n",
       "      <td>f6rE</td>\n",
       "      <td>f6re</td>\n",
       "      <td>...</td>\n",
       "      <td>fE</td>\n",
       "      <td>fE</td>\n",
       "      <td>fasjô</td>\n",
       "      <td>fas</td>\n",
       "      <td>fasje</td>\n",
       "      <td>fas</td>\n",
       "      <td>fas</td>\n",
       "      <td>fas</td>\n",
       "      <td>38.815369</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>avoir</td>\n",
       "      <td>ym</td>\n",
       "      <td>y</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>y</td>\n",
       "      <td>Orô</td>\n",
       "      <td>OrE</td>\n",
       "      <td>Ore</td>\n",
       "      <td>...</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "      <td>Ejô</td>\n",
       "      <td>E</td>\n",
       "      <td>Eje</td>\n",
       "      <td>E</td>\n",
       "      <td>E</td>\n",
       "      <td>E</td>\n",
       "      <td>44.468929</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>devoir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dyr</td>\n",
       "      <td>dy</td>\n",
       "      <td>d6vrô</td>\n",
       "      <td>d6vrE</td>\n",
       "      <td>d6vre</td>\n",
       "      <td>...</td>\n",
       "      <td>dy</td>\n",
       "      <td>dy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dwav</td>\n",
       "      <td>d6vje</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dwav</td>\n",
       "      <td>dwav</td>\n",
       "      <td>43.330234</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>dire</td>\n",
       "      <td>dim</td>\n",
       "      <td>di</td>\n",
       "      <td>dit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dir</td>\n",
       "      <td>di</td>\n",
       "      <td>dirô</td>\n",
       "      <td>dirE</td>\n",
       "      <td>dire</td>\n",
       "      <td>...</td>\n",
       "      <td>di</td>\n",
       "      <td>di</td>\n",
       "      <td>NaN</td>\n",
       "      <td>diz</td>\n",
       "      <td>dizje</td>\n",
       "      <td>diz</td>\n",
       "      <td>diz</td>\n",
       "      <td>diz</td>\n",
       "      <td>35.221472</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>être</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fy</td>\n",
       "      <td>fyr</td>\n",
       "      <td>fy</td>\n",
       "      <td>s6rô</td>\n",
       "      <td>s6rE</td>\n",
       "      <td>s6re</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>swajô</td>\n",
       "      <td>swa</td>\n",
       "      <td>swaje</td>\n",
       "      <td>swa</td>\n",
       "      <td>swa</td>\n",
       "      <td>swa</td>\n",
       "      <td>40.229490</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>aller</td>\n",
       "      <td>alam</td>\n",
       "      <td>alE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>alEr</td>\n",
       "      <td>ala</td>\n",
       "      <td>irô</td>\n",
       "      <td>irE</td>\n",
       "      <td>ire</td>\n",
       "      <td>...</td>\n",
       "      <td>ale</td>\n",
       "      <td>ale</td>\n",
       "      <td>NaN</td>\n",
       "      <td>aj</td>\n",
       "      <td>NaN</td>\n",
       "      <td>aj</td>\n",
       "      <td>aj</td>\n",
       "      <td>aj</td>\n",
       "      <td>48.190607</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>trouver</td>\n",
       "      <td>truvam</td>\n",
       "      <td>truvE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>truvEr</td>\n",
       "      <td>truva</td>\n",
       "      <td>truv6rô</td>\n",
       "      <td>truv6rE</td>\n",
       "      <td>truv6re</td>\n",
       "      <td>...</td>\n",
       "      <td>truve</td>\n",
       "      <td>truve</td>\n",
       "      <td>NaN</td>\n",
       "      <td>truv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>truv</td>\n",
       "      <td>truv</td>\n",
       "      <td>truv</td>\n",
       "      <td>34.980973</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>venir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vê</td>\n",
       "      <td>vêr</td>\n",
       "      <td>vê</td>\n",
       "      <td>vjêdrô</td>\n",
       "      <td>vjêdrE</td>\n",
       "      <td>vjêdre</td>\n",
       "      <td>...</td>\n",
       "      <td>v6ny</td>\n",
       "      <td>v6ny</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vjEn</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vjEn</td>\n",
       "      <td>vjEn</td>\n",
       "      <td>vjEn</td>\n",
       "      <td>36.161519</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>buter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>bytE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>bytEr</td>\n",
       "      <td>byta</td>\n",
       "      <td>byt6rô</td>\n",
       "      <td>byt6rE</td>\n",
       "      <td>byt6re</td>\n",
       "      <td>...</td>\n",
       "      <td>byte</td>\n",
       "      <td>byte</td>\n",
       "      <td>NaN</td>\n",
       "      <td>byt</td>\n",
       "      <td>NaN</td>\n",
       "      <td>byt</td>\n",
       "      <td>byt</td>\n",
       "      <td>byt</td>\n",
       "      <td>31.282769</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>irriter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>iritE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>iritEr</td>\n",
       "      <td>irita</td>\n",
       "      <td>irit6rô</td>\n",
       "      <td>irit6rE</td>\n",
       "      <td>irit6re</td>\n",
       "      <td>...</td>\n",
       "      <td>irite</td>\n",
       "      <td>irite</td>\n",
       "      <td>NaN</td>\n",
       "      <td>irit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>irit</td>\n",
       "      <td>irit</td>\n",
       "      <td>irit</td>\n",
       "      <td>41.907078</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>martyriser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>martirizE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>martirizEr</td>\n",
       "      <td>martiriza</td>\n",
       "      <td>martiriz6rô</td>\n",
       "      <td>martiriz6rE</td>\n",
       "      <td>martiriz6re</td>\n",
       "      <td>...</td>\n",
       "      <td>martirize</td>\n",
       "      <td>martirize</td>\n",
       "      <td>NaN</td>\n",
       "      <td>martiriz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>martiriz</td>\n",
       "      <td>martiriz</td>\n",
       "      <td>martiriz</td>\n",
       "      <td>390.886296</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>maîtriser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEtrizE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEtrizEr</td>\n",
       "      <td>mEtriza</td>\n",
       "      <td>mEtriz6rô</td>\n",
       "      <td>mEtriz6rE</td>\n",
       "      <td>mEtriz6re</td>\n",
       "      <td>...</td>\n",
       "      <td>mEtrize</td>\n",
       "      <td>mEtrize</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEtriz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEtriz</td>\n",
       "      <td>mEtriz</td>\n",
       "      <td>mEtriz</td>\n",
       "      <td>386.337603</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>mémoriser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEmOrizE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEmOrizEr</td>\n",
       "      <td>mEmOriza</td>\n",
       "      <td>mEmOriz6rô</td>\n",
       "      <td>mEmOriz6rE</td>\n",
       "      <td>mEmOriz6re</td>\n",
       "      <td>...</td>\n",
       "      <td>mEmOrize</td>\n",
       "      <td>mEmOrize</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEmOriz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEmOriz</td>\n",
       "      <td>mEmOriz</td>\n",
       "      <td>mEmOriz</td>\n",
       "      <td>394.089936</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>mépriser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEprizE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEprizEr</td>\n",
       "      <td>mEpriza</td>\n",
       "      <td>mEpriz6rô</td>\n",
       "      <td>mEpriz6rE</td>\n",
       "      <td>mEpriz6re</td>\n",
       "      <td>...</td>\n",
       "      <td>mEprize</td>\n",
       "      <td>mEprize</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEpriz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mEpriz</td>\n",
       "      <td>mEpriz</td>\n",
       "      <td>mEpriz</td>\n",
       "      <td>390.454366</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>rebrousser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6brusE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6brusEr</td>\n",
       "      <td>r6brusa</td>\n",
       "      <td>r6brus6rô</td>\n",
       "      <td>r6brus6rE</td>\n",
       "      <td>r6brus6re</td>\n",
       "      <td>...</td>\n",
       "      <td>r6bruse</td>\n",
       "      <td>r6bruse</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6brus</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6brus</td>\n",
       "      <td>r6brus</td>\n",
       "      <td>r6brus</td>\n",
       "      <td>40.636596</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>retrouver</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6truvE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6truvEr</td>\n",
       "      <td>r6truva</td>\n",
       "      <td>r6truv6rô</td>\n",
       "      <td>r6truv6rE</td>\n",
       "      <td>r6truv6re</td>\n",
       "      <td>...</td>\n",
       "      <td>r6truve</td>\n",
       "      <td>r6truve</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6truv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6truv</td>\n",
       "      <td>r6truv</td>\n",
       "      <td>r6truv</td>\n",
       "      <td>33.224520</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>voir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vi</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vi</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vi</td>\n",
       "      <td>vErô</td>\n",
       "      <td>vErE</td>\n",
       "      <td>vEre</td>\n",
       "      <td>...</td>\n",
       "      <td>vy</td>\n",
       "      <td>vy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vwa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vwa</td>\n",
       "      <td>vwa</td>\n",
       "      <td>vwa</td>\n",
       "      <td>11.808868</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>amputer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpytE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpytEr</td>\n",
       "      <td>âpyta</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpyt6rE</td>\n",
       "      <td>âpyt6re</td>\n",
       "      <td>...</td>\n",
       "      <td>âpyte</td>\n",
       "      <td>âpyte</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpyt</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpyt</td>\n",
       "      <td>âpyt</td>\n",
       "      <td>âpyt</td>\n",
       "      <td>389.620832</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>chavirer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SavirE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SavirEr</td>\n",
       "      <td>Savira</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Savir6rE</td>\n",
       "      <td>Savir6re</td>\n",
       "      <td>...</td>\n",
       "      <td>Savire</td>\n",
       "      <td>Savire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Savir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Savir</td>\n",
       "      <td>Savir</td>\n",
       "      <td>Savir</td>\n",
       "      <td>432.970505</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>conspirer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kôspirE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kôspirEr</td>\n",
       "      <td>kôspira</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kôspir6rE</td>\n",
       "      <td>kôspir6re</td>\n",
       "      <td>...</td>\n",
       "      <td>kôspire</td>\n",
       "      <td>kôspire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kôspir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kôspir</td>\n",
       "      <td>kôspir</td>\n",
       "      <td>kôspir</td>\n",
       "      <td>391.412976</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>diffuser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>difyzE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>difyzEr</td>\n",
       "      <td>difyza</td>\n",
       "      <td>NaN</td>\n",
       "      <td>difyz6rE</td>\n",
       "      <td>difyz6re</td>\n",
       "      <td>...</td>\n",
       "      <td>difyze</td>\n",
       "      <td>difyze</td>\n",
       "      <td>NaN</td>\n",
       "      <td>difyz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>difyz</td>\n",
       "      <td>difyz</td>\n",
       "      <td>difyz</td>\n",
       "      <td>426.429033</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>duper</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dypE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dypa</td>\n",
       "      <td>dyp6rô</td>\n",
       "      <td>dyp6rE</td>\n",
       "      <td>dyp6re</td>\n",
       "      <td>...</td>\n",
       "      <td>dype</td>\n",
       "      <td>dype</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dyp</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dyp</td>\n",
       "      <td>dyp</td>\n",
       "      <td>dyp</td>\n",
       "      <td>395.814526</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>dériver</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dErivE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dErivEr</td>\n",
       "      <td>dEriva</td>\n",
       "      <td>dEriv6rô</td>\n",
       "      <td>dEriv6rE</td>\n",
       "      <td>dEriv6re</td>\n",
       "      <td>...</td>\n",
       "      <td>dErive</td>\n",
       "      <td>dErive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dEriv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dEriv</td>\n",
       "      <td>dEriv</td>\n",
       "      <td>dEriv</td>\n",
       "      <td>393.297836</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>empirer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpirE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpirEr</td>\n",
       "      <td>âpira</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpir6rE</td>\n",
       "      <td>âpir6re</td>\n",
       "      <td>...</td>\n",
       "      <td>âpire</td>\n",
       "      <td>âpire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âpir</td>\n",
       "      <td>âpir</td>\n",
       "      <td>âpir</td>\n",
       "      <td>409.328254</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>habiter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>abitE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>abitEr</td>\n",
       "      <td>abita</td>\n",
       "      <td>abit6rô</td>\n",
       "      <td>abit6rE</td>\n",
       "      <td>abit6re</td>\n",
       "      <td>...</td>\n",
       "      <td>abite</td>\n",
       "      <td>abite</td>\n",
       "      <td>NaN</td>\n",
       "      <td>abit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>abit</td>\n",
       "      <td>abit</td>\n",
       "      <td>abit</td>\n",
       "      <td>11.357510</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>passer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pasE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pasa</td>\n",
       "      <td>pasEr</td>\n",
       "      <td>pasa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pas6rE</td>\n",
       "      <td>pas6re</td>\n",
       "      <td>...</td>\n",
       "      <td>pase</td>\n",
       "      <td>pase</td>\n",
       "      <td>pasjô</td>\n",
       "      <td>pas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pas</td>\n",
       "      <td>pas</td>\n",
       "      <td>pas</td>\n",
       "      <td>4.785714</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>pousser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pusE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pusEr</td>\n",
       "      <td>pusa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pus6rE</td>\n",
       "      <td>pus6re</td>\n",
       "      <td>...</td>\n",
       "      <td>puse</td>\n",
       "      <td>puse</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pus</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pus</td>\n",
       "      <td>pus</td>\n",
       "      <td>pus</td>\n",
       "      <td>1.505445</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>précipiter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>prEsipitE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>prEsipitEr</td>\n",
       "      <td>prEsipita</td>\n",
       "      <td>prEsipit6rô</td>\n",
       "      <td>prEsipit6rE</td>\n",
       "      <td>prEsipit6re</td>\n",
       "      <td>...</td>\n",
       "      <td>prEsipite</td>\n",
       "      <td>prEsipite</td>\n",
       "      <td>NaN</td>\n",
       "      <td>prEsipit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>prEsipit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>prEsipit</td>\n",
       "      <td>62.202901</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>refuser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6fyzE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6fyzEr</td>\n",
       "      <td>r6fyza</td>\n",
       "      <td>r6fyz6rô</td>\n",
       "      <td>r6fyz6rE</td>\n",
       "      <td>r6fyz6re</td>\n",
       "      <td>...</td>\n",
       "      <td>r6fyze</td>\n",
       "      <td>r6fyze</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6fyz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6fyz</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6fyz</td>\n",
       "      <td>46.846140</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>réputer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>rEpytE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>rEpytEr</td>\n",
       "      <td>rEpyta</td>\n",
       "      <td>NaN</td>\n",
       "      <td>rEpyt6rE</td>\n",
       "      <td>rEpyt6re</td>\n",
       "      <td>...</td>\n",
       "      <td>rEpyte</td>\n",
       "      <td>rEpyte</td>\n",
       "      <td>NaN</td>\n",
       "      <td>rEpyt</td>\n",
       "      <td>NaN</td>\n",
       "      <td>rEpyt</td>\n",
       "      <td>rEpyt</td>\n",
       "      <td>rEpyt</td>\n",
       "      <td>539.390961</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79991</th>\n",
       "      <td>évoluer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EvOlyE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EvOlyEr</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.294221</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79994</th>\n",
       "      <td>assaillir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>asajir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.453617</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79995</th>\n",
       "      <td>aveugler</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>av6gle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63.646962</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79997</th>\n",
       "      <td>beugler</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b6gla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>56.994400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80009</th>\n",
       "      <td>conquérir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kôkjEr</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.018306</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80014</th>\n",
       "      <td>dissoudre</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>111.722638</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80019</th>\n",
       "      <td>décroître</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>dEkry</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.729455</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80023</th>\n",
       "      <td>embaucher</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âbOSe</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.301385</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80024</th>\n",
       "      <td>embaumer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âbOme</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.918686</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80026</th>\n",
       "      <td>enquérir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âki</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>âki</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.591106</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80032</th>\n",
       "      <td>fourvoyer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>furvwaja</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>418.399685</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80034</th>\n",
       "      <td>gazouiller</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>339.855794</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80037</th>\n",
       "      <td>gribouiller</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>419.999673</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80039</th>\n",
       "      <td>jauger</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>391.125404</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80045</th>\n",
       "      <td>mouvoir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>my</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>135.028348</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80051</th>\n",
       "      <td>peupler</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>p6ple</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>46.558086</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80072</th>\n",
       "      <td>reconquérir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>127.683314</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80100</th>\n",
       "      <td>cabrer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kabra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kabra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>328.191739</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80104</th>\n",
       "      <td>choir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>353.882955</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80106</th>\n",
       "      <td>cocufier</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>376.253711</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80107</th>\n",
       "      <td>corrompre</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kOrôpy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>353.411399</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80108</th>\n",
       "      <td>crépiter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>krEpita</td>\n",
       "      <td>NaN</td>\n",
       "      <td>krEpita</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>433.817170</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80109</th>\n",
       "      <td>discourir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>407.040612</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80122</th>\n",
       "      <td>ferrer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>459.881330</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80124</th>\n",
       "      <td>frire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>508.562173</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80147</th>\n",
       "      <td>relayer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>248.009211</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80148</th>\n",
       "      <td>retoucher</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6tuSE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>r6tuSE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>394.384654</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80152</th>\n",
       "      <td>sanctifier</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sâktifjE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sâktifjE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>441.237149</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80155</th>\n",
       "      <td>sourdre</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.540702</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80165</th>\n",
       "      <td>éclore</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EklOrô</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>174.435550</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2896 rows × 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            lexeme    ai1P       ai1S ai2P      ai2S        ai3P       ai3S  \\\n",
       "0            faire     fim         fi  NaN        fi         fir         fi   \n",
       "1            avoir      ym          y  NaN       NaN         NaN          y   \n",
       "2           devoir     NaN         dy  NaN       NaN         dyr         dy   \n",
       "3             dire     dim         di  dit       NaN         dir         di   \n",
       "4             être     NaN         fy  NaN        fy         fyr         fy   \n",
       "5            aller    alam        alE  NaN       NaN        alEr        ala   \n",
       "6          trouver  truvam      truvE  NaN       NaN      truvEr      truva   \n",
       "7            venir     NaN        NaN  NaN        vê         vêr         vê   \n",
       "17           buter     NaN       bytE  NaN       NaN       bytEr       byta   \n",
       "33         irriter     NaN      iritE  NaN       NaN      iritEr      irita   \n",
       "34      martyriser     NaN  martirizE  NaN       NaN  martirizEr  martiriza   \n",
       "35       maîtriser     NaN    mEtrizE  NaN       NaN    mEtrizEr    mEtriza   \n",
       "36       mémoriser     NaN   mEmOrizE  NaN       NaN   mEmOrizEr   mEmOriza   \n",
       "37        mépriser     NaN    mEprizE  NaN       NaN    mEprizEr    mEpriza   \n",
       "42      rebrousser     NaN    r6brusE  NaN       NaN    r6brusEr    r6brusa   \n",
       "47       retrouver     NaN    r6truvE  NaN       NaN    r6truvEr    r6truva   \n",
       "54            voir     NaN         vi  NaN        vi         NaN         vi   \n",
       "61         amputer     NaN      âpytE  NaN       NaN      âpytEr      âpyta   \n",
       "63        chavirer     NaN     SavirE  NaN       NaN     SavirEr     Savira   \n",
       "66       conspirer     NaN    kôspirE  NaN       NaN    kôspirEr    kôspira   \n",
       "70        diffuser     NaN     difyzE  NaN       NaN     difyzEr     difyza   \n",
       "75           duper     NaN       dypE  NaN       NaN         NaN       dypa   \n",
       "81         dériver     NaN     dErivE  NaN       NaN     dErivEr     dEriva   \n",
       "82         empirer     NaN      âpirE  NaN       NaN      âpirEr      âpira   \n",
       "89         habiter     NaN      abitE  NaN       NaN      abitEr      abita   \n",
       "98          passer     NaN       pasE  NaN      pasa       pasEr       pasa   \n",
       "101        pousser     NaN       pusE  NaN       NaN       pusEr       pusa   \n",
       "104     précipiter     NaN  prEsipitE  NaN       NaN  prEsipitEr  prEsipita   \n",
       "107        refuser     NaN     r6fyzE  NaN       NaN     r6fyzEr     r6fyza   \n",
       "114        réputer     NaN     rEpytE  NaN       NaN     rEpytEr     rEpyta   \n",
       "...            ...     ...        ...  ...       ...         ...        ...   \n",
       "79991      évoluer     NaN     EvOlyE  NaN       NaN     EvOlyEr        NaN   \n",
       "79994    assaillir     NaN        NaN  NaN       NaN      asajir        NaN   \n",
       "79995     aveugler     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "79997      beugler     NaN        NaN  NaN       NaN         NaN      b6gla   \n",
       "80009    conquérir     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80014    dissoudre     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80019    décroître     NaN        NaN  NaN       NaN         NaN      dEkry   \n",
       "80023    embaucher     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80024     embaumer     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80026     enquérir     NaN        âki  NaN       NaN         NaN        âki   \n",
       "80032    fourvoyer     NaN        NaN  NaN  furvwaja         NaN        NaN   \n",
       "80034   gazouiller     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80037  gribouiller     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80039       jauger     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80045      mouvoir     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80051      peupler     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80072  reconquérir     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80100       cabrer     NaN        NaN  NaN     kabra         NaN      kabra   \n",
       "80104        choir     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80106     cocufier     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80107    corrompre     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80108     crépiter     NaN        NaN  NaN   krEpita         NaN    krEpita   \n",
       "80109    discourir     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80122       ferrer     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80124        frire     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80147      relayer     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80148    retoucher     NaN     r6tuSE  NaN       NaN         NaN     r6tuSE   \n",
       "80152   sanctifier     NaN   sâktifjE  NaN       NaN         NaN   sâktifjE   \n",
       "80155      sourdre     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "80165       éclore     NaN        NaN  NaN       NaN         NaN        NaN   \n",
       "\n",
       "              fi1P         fi1S         fi2P  ...         ppMP       ppMS  \\\n",
       "0             f6rô         f6rE         f6re  ...           fE         fE   \n",
       "1              Orô          OrE          Ore  ...            y          y   \n",
       "2            d6vrô        d6vrE        d6vre  ...           dy         dy   \n",
       "3             dirô         dirE         dire  ...           di         di   \n",
       "4             s6rô         s6rE         s6re  ...          NaN        NaN   \n",
       "5              irô          irE          ire  ...          ale        ale   \n",
       "6          truv6rô      truv6rE      truv6re  ...        truve      truve   \n",
       "7           vjêdrô       vjêdrE       vjêdre  ...         v6ny       v6ny   \n",
       "17          byt6rô       byt6rE       byt6re  ...         byte       byte   \n",
       "33         irit6rô      irit6rE      irit6re  ...        irite      irite   \n",
       "34     martiriz6rô  martiriz6rE  martiriz6re  ...    martirize  martirize   \n",
       "35       mEtriz6rô    mEtriz6rE    mEtriz6re  ...      mEtrize    mEtrize   \n",
       "36      mEmOriz6rô   mEmOriz6rE   mEmOriz6re  ...     mEmOrize   mEmOrize   \n",
       "37       mEpriz6rô    mEpriz6rE    mEpriz6re  ...      mEprize    mEprize   \n",
       "42       r6brus6rô    r6brus6rE    r6brus6re  ...      r6bruse    r6bruse   \n",
       "47       r6truv6rô    r6truv6rE    r6truv6re  ...      r6truve    r6truve   \n",
       "54            vErô         vErE         vEre  ...           vy         vy   \n",
       "61             NaN      âpyt6rE      âpyt6re  ...        âpyte      âpyte   \n",
       "63             NaN     Savir6rE     Savir6re  ...       Savire     Savire   \n",
       "66             NaN    kôspir6rE    kôspir6re  ...      kôspire    kôspire   \n",
       "70             NaN     difyz6rE     difyz6re  ...       difyze     difyze   \n",
       "75          dyp6rô       dyp6rE       dyp6re  ...         dype       dype   \n",
       "81        dEriv6rô     dEriv6rE     dEriv6re  ...       dErive     dErive   \n",
       "82             NaN      âpir6rE      âpir6re  ...        âpire      âpire   \n",
       "89         abit6rô      abit6rE      abit6re  ...        abite      abite   \n",
       "98             NaN       pas6rE       pas6re  ...         pase       pase   \n",
       "101            NaN       pus6rE       pus6re  ...         puse       puse   \n",
       "104    prEsipit6rô  prEsipit6rE  prEsipit6re  ...    prEsipite  prEsipite   \n",
       "107       r6fyz6rô     r6fyz6rE     r6fyz6re  ...       r6fyze     r6fyze   \n",
       "114            NaN     rEpyt6rE     rEpyt6re  ...       rEpyte     rEpyte   \n",
       "...            ...          ...          ...  ...          ...        ...   \n",
       "79991          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "79994          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "79995          NaN          NaN          NaN  ...          NaN     av6gle   \n",
       "79997          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80009          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80014          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80019          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80023          NaN          NaN          NaN  ...          NaN      âbOSe   \n",
       "80024          NaN          NaN          NaN  ...          NaN      âbOme   \n",
       "80026          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80032          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80034          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80037          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80039          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80045          NaN          NaN          NaN  ...          NaN         my   \n",
       "80051          NaN          NaN          NaN  ...          NaN      p6ple   \n",
       "80072          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80100          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80104          NaN          NaN          NaN  ...          NaN         Sy   \n",
       "80106          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80107          NaN          NaN          NaN  ...          NaN     kOrôpy   \n",
       "80108          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80109          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80122          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80124          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80147          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80148          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80152          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80155          NaN          NaN          NaN  ...          NaN        NaN   \n",
       "80165       EklOrô          NaN          NaN  ...          NaN        NaN   \n",
       "\n",
       "        ps1P      ps1S   ps2P      ps2S      ps3P      ps3S       score ajouts  \n",
       "0      fasjô       fas  fasje       fas       fas       fas   38.815369      0  \n",
       "1        Ejô         E    Eje         E         E         E   44.468929      0  \n",
       "2        NaN      dwav  d6vje       NaN      dwav      dwav   43.330234      0  \n",
       "3        NaN       diz  dizje       diz       diz       diz   35.221472      0  \n",
       "4      swajô       swa  swaje       swa       swa       swa   40.229490      0  \n",
       "5        NaN        aj    NaN        aj        aj        aj   48.190607      0  \n",
       "6        NaN      truv    NaN      truv      truv      truv   34.980973      0  \n",
       "7        NaN      vjEn    NaN      vjEn      vjEn      vjEn   36.161519      0  \n",
       "17       NaN       byt    NaN       byt       byt       byt   31.282769     29  \n",
       "33       NaN      irit    NaN      irit      irit      irit   41.907078     30  \n",
       "34       NaN  martiriz    NaN  martiriz  martiriz  martiriz  390.886296     36  \n",
       "35       NaN    mEtriz    NaN    mEtriz    mEtriz    mEtriz  386.337603     32  \n",
       "36       NaN   mEmOriz    NaN   mEmOriz   mEmOriz   mEmOriz  394.089936     36  \n",
       "37       NaN    mEpriz    NaN    mEpriz    mEpriz    mEpriz  390.454366     26  \n",
       "42       NaN    r6brus    NaN    r6brus    r6brus    r6brus   40.636596     33  \n",
       "47       NaN    r6truv    NaN    r6truv    r6truv    r6truv   33.224520      5  \n",
       "54       NaN       vwa    NaN       vwa       vwa       vwa   11.808868      0  \n",
       "61       NaN      âpyt    NaN      âpyt      âpyt      âpyt  389.620832     35  \n",
       "63       NaN     Savir    NaN     Savir     Savir     Savir  432.970505     34  \n",
       "66       NaN    kôspir    NaN    kôspir    kôspir    kôspir  391.412976     35  \n",
       "70       NaN     difyz    NaN     difyz     difyz     difyz  426.429033     33  \n",
       "75       NaN       dyp    NaN       dyp       dyp       dyp  395.814526     35  \n",
       "81       NaN     dEriv    NaN     dEriv     dEriv     dEriv  393.297836     30  \n",
       "82       NaN      âpir    NaN      âpir      âpir      âpir  409.328254     33  \n",
       "89       NaN      abit    NaN      abit      abit      abit   11.357510     18  \n",
       "98     pasjô       pas    NaN       pas       pas       pas    4.785714      0  \n",
       "101      NaN       pus    NaN       pus       pus       pus    1.505445     14  \n",
       "104      NaN  prEsipit    NaN  prEsipit       NaN  prEsipit   62.202901     24  \n",
       "107      NaN     r6fyz    NaN     r6fyz       NaN     r6fyz   46.846140     18  \n",
       "114      NaN     rEpyt    NaN     rEpyt     rEpyt     rEpyt  539.390961     35  \n",
       "...      ...       ...    ...       ...       ...       ...         ...    ...  \n",
       "79991    NaN       NaN    NaN       NaN       NaN       NaN   23.294221      1  \n",
       "79994    NaN       NaN    NaN       NaN       NaN       NaN   16.453617      0  \n",
       "79995    NaN       NaN    NaN       NaN       NaN       NaN   63.646962      0  \n",
       "79997    NaN       NaN    NaN       NaN       NaN       NaN   56.994400      0  \n",
       "80009    NaN    kôkjEr    NaN       NaN       NaN       NaN   21.018306      0  \n",
       "80014    NaN       NaN    NaN       NaN       NaN       NaN  111.722638      0  \n",
       "80019    NaN       NaN    NaN       NaN       NaN       NaN  130.729455      0  \n",
       "80023    NaN       NaN    NaN       NaN       NaN       NaN   59.301385      0  \n",
       "80024    NaN       NaN    NaN       NaN       NaN       NaN   45.918686      1  \n",
       "80026    NaN       NaN    NaN       NaN       NaN       NaN    2.591106      0  \n",
       "80032    NaN       NaN    NaN       NaN       NaN       NaN  418.399685      2  \n",
       "80034    NaN       NaN    NaN       NaN       NaN       NaN  339.855794      2  \n",
       "80037    NaN       NaN    NaN       NaN       NaN       NaN  419.999673      2  \n",
       "80039    NaN       NaN    NaN       NaN       NaN       NaN  391.125404      0  \n",
       "80045    NaN       NaN    NaN       NaN       NaN       NaN  135.028348      0  \n",
       "80051    NaN       NaN    NaN       NaN       NaN       NaN   46.558086      0  \n",
       "80072    NaN       NaN    NaN       NaN       NaN       NaN  127.683314      0  \n",
       "80100    NaN       NaN    NaN       NaN       NaN       NaN  328.191739      1  \n",
       "80104    NaN       NaN    NaN       NaN       NaN       NaN  353.882955      0  \n",
       "80106    NaN       NaN    NaN       NaN       NaN       NaN  376.253711      1  \n",
       "80107    NaN       NaN    NaN       NaN       NaN       NaN  353.411399      0  \n",
       "80108    NaN       NaN    NaN       NaN       NaN       NaN  433.817170      1  \n",
       "80109    NaN       NaN    NaN       NaN       NaN       NaN  407.040612      1  \n",
       "80122    NaN       NaN    NaN       NaN       NaN       NaN  459.881330      1  \n",
       "80124    NaN       NaN    NaN       NaN       NaN       NaN  508.562173      1  \n",
       "80147    NaN       NaN    NaN       NaN       NaN       NaN  248.009211      0  \n",
       "80148    NaN       NaN    NaN       NaN       NaN       NaN  394.384654      1  \n",
       "80152    NaN       NaN    NaN       NaN       NaN       NaN  441.237149      1  \n",
       "80155    NaN       NaN    NaN       NaN       NaN       NaN    6.540702      0  \n",
       "80165    NaN       NaN    NaN       NaN       NaN       NaN  174.435550      1  \n",
       "\n",
       "[2896 rows x 54 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
>>>>>>> TEMP
   "source": [
    "with open(\"2015-Data/\"+samplePrefix+dateheure()+'-SILVER.pkl', 'wb') as output:\n",
    "   pickle.dump(paradigmeSILVER, output, pickle.HIGHEST_PROTOCOL)\n",
    "with open(\"2015-Data/\"+samplePrefix+dateheure()+'-GOLD.pkl', 'wb') as output:\n",
    "   pickle.dump(GOLD, output, pickle.HIGHEST_PROTOCOL)\n",
    "paradigmeSILVER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def compareGOLD(row):\n",
    "    global n\n",
    "#    if row[\"lexeme\"]==\"dodo\": \n",
    "#        debug=True\n",
    "#    else:\n",
    "#        debug=False\n",
    "    if n%250==0: print (n,end=\", \")\n",
    "    n+=1\n",
    "    ligne={k:row[k] for k in row.keys() if not k in [\"lexeme\",\"score\",\"ajouts\"]}\n",
    "    lexeme=row[\"lexeme\"]\n",
    "    score=row[\"score\"]\n",
    "    ajouts=row[\"ajouts\"]\n",
    "    if not lexeme in conjugaisons:\n",
    "        conjugaisons[lexeme]={\"diff\":[],\"miss\":[],\"over\":[],\"overmiss\":[],\"ok\":[]}\n",
    "    if not lexeme in cliquesTypes:\n",
    "        cliquesTypes[lexeme]={\"diff\":[],\"miss\":[],\"over\":[],\"overmiss\":[],\"ok\":[]}\n",
    "    identiques=[]\n",
    "    differents=[]\n",
    "    missing=[]\n",
    "    over=[]\n",
    "    for case in analyseCases:\n",
    "        if debug:    \n",
    "            print (lexeme,case)\n",
    "            print (GOLD[GOLD[\"lexeme\"]==lexeme][case].item())\n",
    "            print ((GOLD[GOLD[\"lexeme\"]==lexeme][case].isnull().iloc[0]))\n",
    "        if not case in row:\n",
    "            if debug: print (\"not case\")\n",
    "            missing.append(u\"%s : Ø ≠ %s\" % (case,GOLD[GOLD[\"lexeme\"]==lexeme][case].item()))\n",
    "            lexical=False\n",
    "            if debug: print (\"absence\",case)\n",
    "        elif case in row[row.isnull()] and not GOLD[GOLD[\"lexeme\"]==lexeme][case].isnull().iloc[0]:\n",
    "            if debug: print (\"not case\")\n",
    "            missing.append(u\"%s : Ø ≠ %s\" % (case,GOLD[GOLD[\"lexeme\"]==lexeme][case].item()))\n",
    "            lexical=False\n",
    "            if debug: print (\"CLIQUES +NaN\",case)\n",
    "        elif not case in row[row.isnull()] and GOLD[GOLD[\"lexeme\"]==lexeme][case].isnull().iloc[0]:\n",
    "            if debug: print (\"not case\")\n",
    "            over.append(u\"%s : %s ≠ Ø\" % (case,row[case]))\n",
    "            lexical=False\n",
    "            if debug: print (\"GOLD -NaN\",case)            \n",
    "        elif (row[case]==GOLD[GOLD[\"lexeme\"]==lexeme][case].item()):\n",
    "            if debug: print (\"egal\")\n",
    "            identiques.append(u\"%s : %s\" % (case,row[case]))\n",
    "            if debug: print (\"valeurs id\")\n",
    "        elif (case in row[row.isnull()]) and (GOLD[GOLD[\"lexeme\"]==lexeme][case].isnull().iloc[0]):\n",
    "            if debug: print (\"NaNs\")\n",
    "            identiques.append(u\"%s : %s\" % (case,u\"ØØØ\"))\n",
    "            if debug: print (\"deux NaN\")\n",
    "        else:\n",
    "            if debug: print (\"else\")\n",
    "            differents.append(u\"%s : %s ≠ %s\" % (case, row[case],GOLD[GOLD[\"lexeme\"]==lexeme][case].item()))\n",
    "            lexical=False\n",
    "            if debug: print (u\"différence\",case)\n",
    "    if differents:\n",
    "        conjugaisons[lexeme][\"diff\"].append(differents)\n",
    "        cliquesTypes[lexeme][\"diff\"].append((ligne,score,ajouts))\n",
    "        if debug: print (\"DIFF\",len(differents),\"=>\", len(identiques), len(identiques)-nombreElements[lexeme], end=saut)\n",
    "        if debug1: print (\", \".join(differents))\n",
    "    if missing and over:\n",
    "        conjugaisons[lexeme][\"overmiss\"].append(over+missing)\n",
    "        cliquesTypes[lexeme][\"overmiss\"].append((ligne,score,ajouts))\n",
    "        if debug: print (\"OVERMISS\", len(over), len(missing),\"=>\", len(identiques), len(identiques)-nombreElements[lexeme], end=saut)\n",
    "        if debug1: \n",
    "            print (\", \".join(missing))\n",
    "            print (\", \".join(over))\n",
    "    elif missing:\n",
    "        conjugaisons[lexeme][\"miss\"].append(missing)\n",
    "        cliquesTypes[lexeme][\"miss\"].append((ligne,score,ajouts))\n",
    "        if debug: print (\"MISS\", len(missing),\"=>\", len(identiques), len(identiques)-nombreElements[lexeme], end=saut)\n",
    "        if debug1: \n",
    "            print (\", \".join(missing))\n",
    "    elif over:\n",
    "        conjugaisons[lexeme][\"over\"].append(over)\n",
    "        cliquesTypes[lexeme][\"over\"].append((ligne,score,ajouts))\n",
    "        if debug: print (\"OVER\", len(over),\"=>\", len(identiques), len(identiques)-nombreElements[lexeme], end=saut)\n",
    "        if debug1: \n",
    "            print (\", \".join(over))\n",
    "    if identiques:\n",
    "        conjugaisons[lexeme][\"ok\"].append(identiques)\n",
    "        cliquesTypes[lexeme][\"ok\"].append((ligne,score,ajouts))\n",
    "        if debug: print (\"OK\", len(identiques), len(identiques)-nombreElements[lexeme],end=saut)\n",
    "        if debug1: print (\", \".join(identiques))\n",
    "#    print ()\n",
    "    return lexical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "debug=False\n",
    "debug1=False\n",
    "saut=\"\\n\"\n",
    "n=0\n",
    "conjugaisons={}\n",
    "cliquesTypes={}\n",
    "print (\", \".join(sampleCases))\n",
    "#paradigmesCLIQUES.apply(compareGOLD,axis=1)\n",
    "paradigmeSILVER.apply(compareGOLD,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "with codecs.open(\"2015-Data/\"+samplePrefix+\".yaml\", 'w', encoding='utf8') as outfile:\n",
    "    outfile.write(yaml.dump(conjugaisons, default_flow_style=True, encoding='utf8'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "yaml.safe_dump(conjugaisons, file(\"2015-Data/\"+samplePrefix+dateheure()+\".yaml\",'w'), encoding='utf-8', allow_unicode=True)\n",
    "yaml.safe_dump(cliquesTypes, file(\"2015-Data/\"+samplePrefix+\"cliques-\"+dateheure()+\".yaml\",'w'), encoding='utf-8', allow_unicode=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "pb=[i for i in conjugaisons if conjugaisons[i][\"diff\"]]\n",
    "print (len(pb))\n",
    "for element in pb:\n",
    "    print (element)\n",
    "    print (\"DIFF\",conjugaisons[element][\"diff\"])\n",
    "    print (\"MISS\",conjugaisons[element][\"miss\"],end=\"\\n\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "good=[i for i in conjugaisons if not conjugaisons[i][\"diff\"]]\n",
    "for lexeme in good:\n",
    "    print (lexeme)\n",
    "    for ident in conjugaisons[lexeme]:\n",
    "        for element in conjugaisons[lexeme][ident]:\n",
    "            print (ident)\n",
    "            print (\", \".join(element))\n",
    "    print ()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "precisions={\"bon\":0,\"mauvais\":0}\n",
    "for verbe in cliquesTypes:\n",
    "    if debug: print (verbe)\n",
    "    for cle in cliquesTypes[verbe]:\n",
    "        if debug: print (cle)\n",
    "        for element in cliquesTypes[verbe][cle]:\n",
    "            if debug: print (element[1],element[2])\n",
    "            if cle in [\"ok\"]:\n",
    "                precisions[\"bon\"]+=element[2]\n",
    "            elif cle in [\"diff\"]:\n",
    "                precisions[\"mauvais\"]+=element[2]\n",
    "precisions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "float(precisions[\"bon\"])/(precisions[\"bon\"]+precisions[\"mauvais\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "basesMesures={\"total\":0,\"bon\":0,\"mauvais\":0}\n",
    "for verbe in conjugaisons:\n",
    "    for cat in conjugaisons[verbe]:\n",
    "        if conjugaisons[verbe][cat]:\n",
    "#            print (verbe,cat,len(conjugaisons[verbe][cat][0]))\n",
    "            if cat==\"miss\":\n",
    "                basesMesures[\"total\"]+=len(conjugaisons[verbe][cat][0])\n",
    "            elif cat==\"ok\":\n",
    "                basesMesures[\"bon\"]+=len(conjugaisons[verbe][cat][0])\n",
    "                basesMesures[\"total\"]+=len(conjugaisons[verbe][cat][0])\n",
    "            elif cat==\"diff\":\n",
    "                basesMesures[\"mauvais\"]+=len(conjugaisons[verbe][cat][0])\n",
    "                basesMesures[\"total\"]+=len(conjugaisons[verbe][cat][0])\n",
    "            elif cat==\"overmiss\":\n",
    "                basesMesures[\"mauvais\"]+=len(conjugaisons[verbe][cat][0])\n",
    "                basesMesures[\"total\"]+=len(conjugaisons[verbe][cat][0])\n",
    "basesMesures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "precisionManip=float(basesMesures[\"bon\"])/(basesMesures[\"bon\"]+basesMesures[\"mauvais\"])\n",
    "precisionManip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "rappelManip=float(basesMesures[\"bon\"])/(basesMesures[\"total\"])\n",
    "rappelManip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cliquesTypes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
